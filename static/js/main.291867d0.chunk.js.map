{"version":3,"sources":["Components/Menu/Menu.module.css","Components/Form/Form.module.css","App.module.css","Components/Employee/Employee.module.css","Components/Input/Input.module.css","Components/Employee/Employee.js","Components/Input/Input.js","Components/Form/Form.js","Components/Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","employee","props","upperCase","str","charAt","toUpperCase","slice","className","styles","Employee","firstName","lastName","department","phoneNumber","Red","onClick","delete","input","classes","Input","invalid","touched","push","Invalid","label","join","elementConfig","value","onChange","changed","form","Form","FormContent","onSubmit","handleSubmit","Close","closeForm","Center","formElements","map","element","key","id","config","event","valid","type","disabled","menu","Menu","inputted","placeholder","name","Button","searched","openForm","sortList","App","sortListHandler","newEmployees","sortedEmployees","state","employeesSorted","filteredElements","compareList","setState","employees","addEmployeeHandler","preventDefault","newEmployee","inputIdentifier","elementId","console","log","submitted","setTimeout","clearInputFields","inputId","formIsValid","inputChangedHandler","newEmployeeInput","updatedInput","target","checkValidity","validation","deleteEmployeeHandler","newFilteredElements","filter","elem","item","rules","isValid","required","trim","openFormHandler","doesDisplayForm","displayForm","inputReceiveHandler","searchedValue","searchedInput","searchHandler","toLowerCase","filteredEmployees","lowerCaseDepartment","lowerCaseLastName","includes","arr","sortCheck","sort","a","b","nameA","nameB","formElementsArray","this","style","padding","FormData","Border","index","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.291867d0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Menu_Menu__3tyOo\",\"Button\":\"Menu_Button__3Tv3g\",\"Input\":\"Menu_Input__2TpK5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__2G4oV\",\"Center\":\"Form_Center__tTPak\",\"FormContent\":\"Form_FormContent__1IZmP\",\"Close\":\"Form_Close__2oO0p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__35iBd\",\"Border\":\"App_Border__245rm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Employee\":\"Employee_Employee__3Ieg7\",\"Red\":\"Employee_Red__1Y88c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Invalid\":\"Input_Invalid__1qKys\"};","import React from 'react'\r\nimport styles from './Employee.module.css'\r\n\r\nconst employee = (props) => {\r\n  const upperCase = (str) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n  return (\r\n    <div className={styles.Employee}>\r\n      <div>\r\n        <h3>{upperCase(props.firstName)} {upperCase(props.lastName)}</h3>\r\n        <p><strong>Department:</strong> {upperCase(props.department)} </p>\r\n        <p><strong>Phone Number:</strong> {props.phoneNumber}</p>\r\n      </div>\r\n      <div>\r\n        <button className={styles.Red} onClick={props.delete}>Delete</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default employee","import React from 'react'\r\nimport styles from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n  const classes = [styles.Input]\r\n  if (props.invalid && props.touched) {\r\n    classes.push(styles.Invalid)\r\n  }\r\n  return (\r\n    <div>\r\n      <label>{props.label}</label>\r\n      <input className={classes.join('')} {...props.elementConfig} value={props.value} onChange={props.changed} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default input","import React from 'react'\r\nimport styles from './Form.module.css'\r\nimport Input from '../Input/Input'\r\n\r\nconst form = (props) => {\r\n  return (\r\n    <div className={styles.Form}>\r\n      <form className={styles.FormContent} onSubmit={props.handleSubmit}>\r\n        <span className={styles.Close} onClick={props.closeForm}>X</span>\r\n        <h2 className={styles.Center}>Add New Employee</h2>\r\n        {props.formElements.map(element => (\r\n          <Input\r\n            key={element.id}\r\n            elementConfig={element.config.elementConfig}\r\n            value={element.config.value}\r\n            changed={(event) => props.changed(event, element.id)}\r\n            invalid={!element.config.valid}\r\n            touched={element.config.touched}\r\n          />\r\n        ))}\r\n        <button type='submit' disabled={props.disabled}>Send</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default form","import React from 'react'\r\nimport styles from './Menu.module.css'\r\n\r\nconst menu = (props) => {\r\n  return (\r\n    <div className={styles.Menu}>\r\n      <div>\r\n        <form>\r\n          <input className={styles.Input} onChange={props.inputted} type='text' placeholder='Last Name or department' name='search' />\r\n          <button className={styles.Button} onClick={props.searched}>Search</button>\r\n        </form>\r\n      </div>\r\n      <div>\r\n        <button className={styles.Button} onClick={props.openForm}>Add New Employee</button>\r\n        <button className={styles.Button} onClick={props.sortList}>Sort</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default menu","import React, {Component} from 'react';\nimport styles from './App.module.css';\nimport Employee from './Components/Employee/Employee';\nimport Form from './Components/Form/Form';\nimport Menu from './Components/Menu/Menu';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      employees: [\n        {firstName: 'Jane', lastName: 'Doe', department: 'Marketing', phoneNumber: '0256589705', id: 'emp1' },\n        {firstName: 'Nick', lastName: 'Mullins', department: 'Finance', phoneNumber: '4356855772', id: 'emp2' },\n        {firstName: 'Sam', lastName: 'Jackson', department: 'Sales', phoneNumber: '0212145544', id: 'emp3' }\n      ],\n      newEmployee: {\n        firstName: {\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter First Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        lastName: {\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter Last Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        department: {\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter Department'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        phoneNumber: {\n          elementConfig: {\n            type: 'number',\n            placeholder: 'Enter Number'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      submitted: false,\n      elementId:4,\n      formIsValid: false,\n      employeesSorted: false,\n      displayForm: false,\n      searchedInput: '',\n      filteredElements: [],\n      searched: false\n    };\n  }\n\n  //Sort by surname function\n  sortListHandler = () => {\n    let newEmployees\n    const sortedEmployees = !this.state.employeesSorted\n    if (this.state.searched) {\n      newEmployees = [...this.state.filteredElements];\n      this.compareList(newEmployees);\n      this.setState({\n        filteredElements: newEmployees,\n        employeesSorted: sortedEmployees\n      });\n    } else {\n      newEmployees = [...this.state.employees]\n      this.compareList(newEmployees)\n      this.setState({\n        employees: newEmployees,\n        employeesSorted: sortedEmployees\n      })\n    }\n  }\n  \n  \n  //Function to add a new employee and to clear the form input fields\n  addEmployeeHandler = (event) => {\n    event.preventDefault()\n    const newEmployee = {}\n    for (const inputIdentifier in this.state.newEmployee) { // inputIdentifier:firstName, lastName...)\n      newEmployee[inputIdentifier] = this.state.newEmployee[inputIdentifier].value\n    }\n    newEmployee[\"id\"] = \"emp\" + this.state.elementId\n    console.log()\n    let submitted = this.state.submitted\n    submitted = true\n    this.setState({\n      employees: [...this.state.employees, newEmployee],\n      submitted: submitted,\n      elementId:this.state.elementId + 1\n    })\n    setTimeout(() => this.clearInputFields())\n  }\n  \n\n  //Function to clear form input fields when discarded\n  clearInputFields = () => {\n    const newEmployee = { ...this.state.newEmployee }\n    for (const inputId in newEmployee) {\n      newEmployee[inputId].value = ''\n      newEmployee[inputId].valid = false\n      newEmployee[inputId].touched = false\n    }\n    this.setState({\n      newEmployee: newEmployee,\n      formIsValid: false\n    })\n  }\n  \n\n  //Event handler to capture input field data\n  inputChangedHandler = (event, inputIdentifier) => {\n    const newEmployeeInput = {\n      ...this.state.newEmployee\n    }\n    const updatedInput = {\n      ...newEmployeeInput[inputIdentifier]\n    }\n    updatedInput.value = event.target.value\n    updatedInput.valid = this.checkValidity(updatedInput.value, updatedInput.validation)\n    updatedInput.touched = true\n    newEmployeeInput[inputIdentifier] = updatedInput\n    let formIsValid = true\n    for (const inputIdentifier in newEmployeeInput) {\n      formIsValid = newEmployeeInput[inputIdentifier].valid && formIsValid\n    }\n    this.setState({\n      newEmployee: newEmployeeInput,\n      formIsValid: formIsValid\n    })\n  }\n\n  //Function to delete an employee contact\n  deleteEmployeeHandler = (id) => {\n    let newEmployees\n    let newFilteredElements\n    const filteredElements = [...this.state.filteredElements]\n    newFilteredElements=filteredElements.filter(elem=>elem.id!==id)\n    const employees = [...this.state.employees]\n    newEmployees=employees.filter(item=>item.id!==id)\n    this.setState({\n      employees: newEmployees,\n      filteredElements: newFilteredElements\n    })\n  }  \n\n  //Function to check required fields' validity\n  checkValidity = (value, rules) => {\n    let isValid = false\n    if (rules.required) {\n      isValid = value.trim() !== ''\n    }\n    return isValid\n  }\n  \n\n  //Function to display and hide the modal form\n  openFormHandler = () => {\n    const doesDisplayForm = this.state.displayForm\n    this.setState({\n      displayForm: !doesDisplayForm,\n      searched: false\n    })\n    setTimeout(() => this.clearInputFields())\n  }\n\n  //Search input field event handler\n  inputReceiveHandler = (event) => {\n    let searchedValue = this.state.searchedInput\n    searchedValue = event.target.value\n    this.setState({\n      searchedInput: searchedValue\n    })\n  }\n\n  //Logic to search by surname or department\n  searchHandler = (event) => {\n    event.preventDefault()\n    const searchedValue = this.state.searchedInput.toLowerCase()\n    const employees = [...this.state.employees]\n    const filteredEmployees = []\n    employees.map(employee => {\n      const lowerCaseDepartment = employee.department.toLowerCase()\n      const lowerCaseLastName = employee.lastName.toLowerCase()\n      if (lowerCaseDepartment.includes(searchedValue) || lowerCaseLastName.includes(searchedValue)) {\n         filteredEmployees.push(employee)\n      }\n      return filteredEmployees\n    })\n    this.setState({\n      filteredElements: filteredEmployees,\n      searched: true\n    })\n  }\n\n  //Logic to compare surnames to sort\n  compareList = (arr) => {\n    let sortCheck = 1\n    if (!this.state.employeesSorted) {\n      sortCheck = -1\n    }\n    arr.sort((a, b) => {\n      var nameA = a.lastName.toUpperCase()\n      var nameB = b.lastName.toUpperCase()\n      if (nameA < nameB) {\n        return sortCheck\n      }\n      if (nameA > nameB) {\n        return sortCheck * -1\n      }\n      return 0\n    })\n  }\n\n  render(){\n    const formElementsArray = [];\n    for (let key in this.state.newEmployee) {\n      formElementsArray.push({\n        id:key,\n        config:this.state.newEmployee[key] //elementConfig and value\n      })\n    }\n    let employees = [];\n    this.state.searched || this.state.filteredElements > 0 ?\n      employees = this.state.filteredElements:\n      employees = this.state.employees\n    return (\n      <div className = { styles.App } >\n        <h1 style={{padding:'10px'}}>Employee Address Book</h1> {\n        this.state.displayForm ?\n        <Form handleSubmit={(event) => this.addEmployeeHandler(event)}\n              changed={this.inputChangedHandler}\n              closeForm={() => this.openFormHandler()}\n              formElements={formElementsArray}\n              key={FormData.id}\n              disabled={!this.state.formIsValid}\n              />:null\n        }\n        <Menu openForm={() => this.openFormHandler()}\n              sortList={this.sortListHandler}\n              searched={(event) => this.searchHandler(event)}\n              inputted={(event) => this.inputReceiveHandler(event)}\n        />\n        <div className={styles.Border} id='border-div'>\n          {\n          employees.map((employee, index) => (\n            <Employee\n              key={index + employee.firstName}\n              firstName={employee.firstName}\n              lastName={employee.lastName}\n              delete={() => this.deleteEmployeeHandler(employee.id)}\n              department={employee.department}\n              phoneNumber={employee.phoneNumber}\n            />\n          ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}